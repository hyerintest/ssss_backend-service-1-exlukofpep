plugins {
    id 'java'
    id 'org.springframework.boot' version '2.7.18'
    id 'io.spring.dependency-management' version '1.0.15.RELEASE'
    id 'com.google.cloud.tools.jib' version '3.3.1'  // Docker 이미지 빌드용
}

group = 'com.tlc.test'
version = '0.0.1'
sourceCompatibility = '1.8'

repositories {
    mavenCentral()
}

ext {
    finalName = 'backend-service-1-exlukofpep'
    dockerRegistry = ''
    dockerName = ''
    dockerTag = ''
    springProfile = ''
}

dependencies {
    implementation 'org.mariadb.jdbc:mariadb-java-client:3.3.2'
    implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:2.1.1'
    implementation 'com.google.code.gson:gson:2.8.6'
    implementation 'com.nimbusds:nimbus-jose-jwt:8.9'
    implementation 'com.googlecode.libphonenumber:libphonenumber:8.11.5'
    implementation 'com.squareup.okhttp3:okhttp:4.4.0'
    implementation 'com.googlecode.log4jdbc:log4jdbc:1.2'

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // Swagger
    implementation 'org.springdoc:springdoc-openapi-ui:1.6.9'
    implementation 'org.springdoc:springdoc-openapi-data-rest:1.6.9'
    implementation 'org.r eflections:reflections:0.10.2'

    // Spring Boot
    implementation('org.springframework.boot:spring-boot-starter') {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
    }
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation('org.springframework.boot:spring-boot-starter-log4j2') {
        exclude group: 'org.slf4j', module: 'slf4j-log4j12'
    }
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'io.micrometer:micrometer-registry-prometheus'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

dependencyManagement {
    imports {
    }
    imports {
    }
}

tasks.named('test') {
    useJUnitPlatform()
}

// 프로파일 설정
def activeProfile = System.getProperty("spring.profiles.active", "default")
if (activeProfile == "local") {
    apply from: 'profile-local.gradle'
} else {
    apply from: 'profile-default.gradle'
}
jib {
    from {
        image = "registry.turacocloud.com/turaco-package/openjdk:8-alpine"
    }
    to {
        image = "${dockerRegistry}"
        if ("${dockerUser}" == ('default')) {
            credHelper = 'ecr-login'
        } else {
            auth {
                username = "${dockerUser}"
                password = "${dockerPassword}"
            }
        }
        tags = ["${serviceName}-${commitRev}", "${serviceName}-latest"]
    }
    extraDirectories {
        paths = 'logs'
    }

    container {
        volumes = ['/tmp', '/logs']
    }
}

// 의존성 업데이트 체크
task checkDependencyUpdates(type: Exec) {
    commandLine 'gradle', 'dependencyUpdates'
}
